#!/bin/python3
'''
ICMP Fast Scan
- 1kTech
'''
import ipaddress, socket, struct, time, random, sys
from threading import Thread
#used to create a checksum for the packet
def checksum(source):
	sum=0
	count_to=float(len(source))
	count=0
	while count<count_to:
		thisval=source[count+1]*256+source[count]
		sum=sum+thisval
		sum=sum&0xffffffff
		count=count+2
	if count_to<len(source):
		sum=sum+source[len(source)-1]
		sum=sum&0xffffffff
	sum=(sum>>16)+(sum&0xffff)
	sum=sum+(sum>>16)
	answer=~sum
	answer=answer&0xffff
	answer=answer>>8|(answer<<8&0xff00)
	return answer
#used to create a packet ping
def createpckt(id):
	header=struct.pack('bbHHh',8,0,0,id,1)
	data=192*'Q'
	data=data.encode()
	mychecksum=checksum(header+data)
	header=struct.pack('bbHHh',8,0,socket.htons(mychecksum),id,1)
	return header+data
#used to ping selected address
def ping(addr, timeout=1):
	mysocket=socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
	idpckt=int((id(timeout)*random.random())%65535)
	pckt=createpckt(idpckt)
	mysocket.connect((addr,80))
	mysocket.sendall(pckt)
	mysocket.close()
#used to ping packets created in list of ips
def rotate(addr,filename,wait,responses):
	print("Sending Packets...",time.strftime("%X %x %Z"))
	for ip in addr:
		ping(str(ip))
		time.sleep(wait)
	print("All packets sent.",time.strftime("%X %x %Z"))
	print("Waiting for all responses")
	time.sleep(2) #enough time for hosts to respond
	global signal
	signal=False #turning off signal after sending all packets
	ping('127.0.0.1')
	print(len(responses), "hosts found!")
	print("Writing File")
	hosts=[]
	for response in sorted(responses):
		ip=struct.unpack('BBBB', response)
		ip="{}.{}.{}.{}".format(ip[0],ip[1],ip[2],ip[3])
		hosts.append(ip)
	fhosts=
	for i in range(len(hosts)):
		if i==0 or hosts[i]!=hosts[i-1]:
			fhosts.append(hosts[i])
	file=open(filename,'w')
	file.write(str(fhosts))
	file.close()
	print("Done",time.strftime("%X %x %Z"))
#used to listen response ping
def listen(responses):
	global signal
	slisten=socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
	slisten.bind(('',1))
	while signal:
		pckt=slisten.recv(1024)[:20][-8:-4]
		responses.append(pckt)
	slisten.close()
def main():
	global signal
	signal=True
	responses=[]
	ips='200.131.0.0/20'
	wait=0.002
	filename='log1.txt'
	ipnetwork=ipaddress.ip_network(ips,strict=False)
	t_server=Thread(target=listen, args=[responses])
	t_server.start()
	t_ping=Thread(target=rotate, args=[ipnetwork,filename,wait,responses])
	t_ping.start()
main()
